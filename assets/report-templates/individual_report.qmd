---
title: "meta_id"
format:
    html:
        grid:
            body-width: 900px
        toc: true
        code-fold: true
        code-tools: true
---

## QC

### mosdepth coverage plots

```{=html}
<figure style="width:100%;height:100%;">
    <iframe src="meta_id.dist.html" style="width:900px;height:1000px;overflow:hidden;margin:0px;padding:0px;border:none;"></iframe>
    <figcaption>Mosdepth coverage plots.</figcaption>
</figure>
```

### nanocomp plots

```{=html}
<iframe src="meta_id_NanoComp_log_length_violin.html" style="width:100%;height:100vh;overflow:hidden;margin:0px;padding:0px;border:none;"></iframe>
```

```{=html}
<iframe src="meta_id_NanoComp_number_of_reads.html" style="width:100%;height:100vh;overflow:hidden;margin:0px;padding:0px;border:none;"></iframe>
```

```{=html}
<iframe src="meta_id_NanoComp_N50.html" style="width:100%;height:100vh;overflow:hidden;margin:0px;padding:0px;border:none;"></iframe>
```

```{=html}
<iframe src="meta_id_NanoComp_percentIdentity_violin.html" style="width:100%;height:100vh;overflow:hidden;margin:0px;padding:0px;border:none;"></iframe>
```

```{=html}
<iframe src="meta_id_NanoComp_quals_violin.html" style="width:100%;height:100vh;overflow:hidden;margin:0px;padding:0px;border:none;"></iframe>
```

## Phasing Report

### Cumulative sum of CpG islands overlapped by haplotype blocks

```{r}
#| label: fig-cumulative-sum-CGI-cover
#| fig-cap: "Cumulative sum of CGI Coverage"
#| column: page

suppressMessages(library(tidyverse))
suppressMessages(library(cowplot))
suppressMessages(library(plyranges))
suppressMessages(library(ggridges))
options(width=200)

#read in the blocks, old and updated LC data
df <- read_tsv("blocks_stats_file", show_col_types=FALSE) %>% mutate(patient = "LC", retina = "no")

#read in the CGIs
CGI <- read_tsv("CGI_bed_file", col_names = c("chr","start","end","N_CpG","length","CpGs","extra1","extra2","extra3","extra4"), show_col_types=FALSE)

#count CpG islands per block.
dfGR <- as_granges(df, seqnames = chromosome, start = from, end = to)
CGIGR <- as_granges(CGI, seqnames = chr)

df$CGI_olaps <- count_overlaps(dfGR, CGIGR)

#cumulative sum:
dforder <- arrange(df,desc(CGI_olaps)) %>% group_by(retina) %>% mutate(rn = row_number())

#reorder retina factors
#dforder$retina <- as.factor(dforder$retina, levels = c("yes","no"))

p <- ggplot(dforder, aes(x = rn, y = cumsum(CGI_olaps), linetype = retina)) + geom_step(data = subset(dforder, retina == "yes"), colour = "red") + geom_step(data = subset(dforder, retina == "no"), colour = "red") +
    labs(title = "Cumulative plot", y = "CGIs overlapped", x = "phase block") + theme_half_open() +
  background_grid() + xlim(c(0,250))
p
#save_plot("meta_id_cumulative_plot_CGI_olaps_fig3b.png",p)
#save_plot("meta_id_cumulative_plot_CGI_olaps_fig3b.svg",p)
#save_plot("meta_id_cumulative_plot_CGI_olaps_fig3b.pdf",p)
```

### Haplotype blocks and sizes

TODO

### Phased VCF stats

{{< include _meta_id_whatshapstats.qmd >}}

## Methylation Clustering Report

### Number of Clustered reads

```{r}
#| label: num-clustered-read_tsv
#| echo: true

all_tissues <- c("all_tissues_list")
for (tissue in all_tissues) {
    clustered_reads <- read_tsv(paste0("meta_id_", tissue, "_CGIX_clustered_reads.tsv.gz"), show_col_types=FALSE)
    #number CGIs from 1 to 454
    CGI_names <- tibble(CGI=1:length(unique(clustered_reads$CGI_id)), CGI_id = unique(clustered_reads$CGI_id))
    #merge with the clustered reads
    clustered_reads <- left_join(clustered_reads, CGI_names, by=join_by(CGI_id))
    # Create a new variable for faceting
    clustered_reads$facet_CGI <- as.integer((clustered_reads$CGI - 1) / 20) + 1

    num_clustered_reads <- clustered_reads %>% filter(assigned_X %in% c("Xa","Xi")) %>% pull(CGI_id) %>% unique() %>% length()

    cat(paste0(tissue, ": ", num_clustered_reads, "\n"))
}
```

### Non-folded and folded distributions of haplotype blocks' skews

```{r}
#| label: distributions-of-skews

#plot the histograms weighted by supporting reads
#first read all the skews into 1 table. Keep it long
H1_all <- data.frame()
patient <- "meta_id"
for (tissue in all_tissues){
    temp <- read_tsv(paste0(patient,"_",tissue,"_CGIX_skew.tsv.gz"), show_col_types=FALSE) %>% 
        mutate(patient = patient, tissue = tissue, folded_skew = ifelse(H1_Xa_skew > 0.5, 1 - H1_Xa_skew, H1_Xa_skew), reads_in_block = H1_Xa + H2_Xa + H1_Xi + H2_Xi)
    H1_all <- rbind(H1_all, temp)
}
#bin the skews
H1_all_binned <- H1_all %>%
    mutate(H1_Xa_skew_bin = cut(H1_Xa_skew, breaks = seq(0, 1, by = 0.05), include.lowest=TRUE)) %>%
    group_by(tissue, H1_Xa_skew_bin) %>%
    summarise(reads_in_block_sum = sum(reads_in_block, na.rm = TRUE), .groups = "drop_last")
#now folded
H1_all_binned2 <- H1_all %>%
    mutate(folded_skew_bin = cut(folded_skew, breaks = seq(0, 0.5, by = 0.05), include.lowest=TRUE)) %>%
    group_by(tissue, folded_skew_bin) %>%
    summarise(reads_in_block_sum = sum(reads_in_block, na.rm = TRUE), .groups = "drop_last")

#plot histograms of binned skews with supporting reads, facetting by tissue.
p <- ggplot(H1_all_binned, aes(x = as.numeric(gsub("[(\\[]", "", gsub(",.*", "", H1_Xa_skew_bin))), y = reads_in_block_sum)) + 
    geom_bar(stat = "identity") + 
    labs(title = "H1 skew", x = "skew", y = "supporting reads") + 
    theme_half_open() + 
    background_grid() + 
    facet_wrap(tissue ~ .)
p
#save_plot("H1/H1_skew_hist_by_tissue.png",p, nrow = 2, ncol = 2)
#save_plot("H1/H1_skew_hist_by_tissue.svg",p, nrow = 2, ncol = 2)
#save_plot("H1/H1_skew_hist_by_tissue.pdf",p, nrow = 2, ncol = 2)
#plot it as ggridges
#order the tissue factors
H1_all$tissue <- factor(H1_all$tissue, levels = all_tissues)
# Flip the order of the factors
H1_all$tissue <- fct_rev(H1_all$tissue)
#set colours to be the same as Fig1 (all retina are purple)
#default_cols <- hue_pal()(4) #"#F8766D" "#7CAE00" "#00BFC4" "#C77CFF"
#tissue_colours <- c("blood" = default_cols[1], "saliva" = default_cols[2], "buccal" = default_cols[3], "3oclock" = default_cols[4], "6oclock" = default_cols[4], "9oclock" = default_cols[4], "12oclock" = default_cols[4])
#plot
p <- ggplot(H1_all, aes(x = H1_Xa_skew, y = tissue, fill = tissue)) + 
    geom_density_ridges() + 
    labs(title = "H1 skew (non-folded)", x = "skew", y = "tissue") + 
    theme_half_open() + 
    background_grid() + 
 #   scale_fill_manual(values = tissue_colours) + 
    guides(fill = guide_legend(reverse = TRUE))
p
#save_plot("H1/H1_skew_density_by_tissue.png",p, base_aspect_ratio = 1.4)
#save_plot("H1/H1_skew_density_by_tissue.svg",p, base_aspect_ratio = 1.4)
#save_plot("H1/H1_skew_density_by_tissue.pdf",p, base_aspect_ratio = 1.4)
#now folded
p <- ggplot(H1_all, aes(x = folded_skew, y = tissue, fill = tissue)) + 
    geom_density_ridges() + 
    labs(title = "H1 skew (folded)", x = "skew", y = "tissue") + 
    theme_half_open() + 
    background_grid() + 
    #scale_fill_manual(values = tissue_colours) + 
    guides(fill = guide_legend(reverse = TRUE))
p
#save_plot("H1/H1_skew_density_by_tissue_folded.png",p, base_aspect_ratio = 1.4)
#save_plot("H1/H1_skew_density_by_tissue_folded.svg",p, base_aspect_ratio = 1.4)
#save_plot("H1/H1_skew_density_by_tissue_folded.pdf",p, base_aspect_ratio = 1.4)
```

### Correlation in per-block skew between tissues

```{r}
#| label: skew-between-tissues

for (tissue in all_tissues) {
    skew <- read_tsv(paste0(patient,"_",tissue,"_CGIX_skew.tsv.gz"), show_col_types=FALSE) %>%
        filter(H1_Xa + H1_Xi + H2_Xa + H2_Xi >= 5) %>% 
        select(PS, H1_Xa_skew) %>% 
        mutate(patient = patient)
    colnames(skew)[2] <- paste0("H1_Xa_skew_",tissue)
    if (exists("patient_skews")) {
        patient_skews <- full_join(patient_skews, skew, by = join_by(PS, patient))
    } else {
        patient_skews <- skew
    }
}

#pivot longer to get the data in the right format for plotting
#patient_skews <- patient_skews %>% pivot_longer(cols = starts_with("H1_Xa_skew"), names_to = "tissue", values_to = "H1_Xa_skew")

#remove "H1_Xa_skew_" from the tissue names
#patient_skews$tissue <- gsub("H1_Xa_skew_","",patient_skews$tissue)

# begin plotting skew correlations with tissues
if (length(all_tissues)>1) {
    plot_grid_width = 2
    numplots = length(all_tissues)*(length(all_tissues)-1)
    size_all_plots <- ceiling(numplots/plot_grid_width)*plot_grid_width
    all_plots <- vector("list", size_all_plots)
    n <- 0
    for (i in 1:(length(all_tissues)-1)) {
        tissuei <- all_tissues[[i]]
        for (j in (i+1):length(all_tissues)) {
            n <- n + 1
            tissuej <- all_tissues[[j]]
            aes_xmap <- sym(paste0("H1_Xa_skew_", tissuei))
            aes_ymap <- sym(paste0("H1_Xa_skew_", tissuej))
            title <- paste("H1", tissuei, "vs", tissuej)
            xlabel <- paste(tissuei, "skew")
            ylabel <- paste(tissuej, "skew")
            subp <- ggplot(
                    patient_skews, 
                    aes(x=!!aes_xmap, y=!!aes_ymap)
                ) + 
                theme_half_open() + 
                geom_point() + 
                background_grid() + 
                labs(title = title, x = xlabel, y = ylabel) + 
                geom_smooth(method = "lm", se = FALSE) + 
                ylim(c(0,1))
            all_plots[[n]] <- subp
        }
    }
    p <- plot_grid(plotlist=all_plots, ncol=plot_grid_width)
    p
    #save_plot("H1/H1_skew_correlations_blood_saliva_buccal.png",p, base_aspect_ratio = 2.7)
    #save_plot("H1/H1_skew_correlations_blood_saliva_buccal.svg",p, base_aspect_ratio = 2.7)
    #save_plot("H1/H1_skew_correlations_blood_saliva_buccal.pdf",p, base_aspect_ratio = 2.7)
} else {
    cat("Only one tissue sample available.\n")
    cat("To view skew correlation between tissues, provide multiple samples for this individual.")
}
```

### Skew-based phasing/per-block orientation

TODO

### Skew is deleterious or protective?

TODO